# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'Pipeline automation for quiz app.'
  imageRepository: 'bootcampquizapi'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: BuildAndTest
  displayName: "Build And Test Stage "
  jobs:
  - job: BuildAndTestJob
    pool:
      vmImage: 'ubuntu-latest'
    steps: 
    - task: Gradle@2
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        gradleWrapperFile: '$(System.DefaultWorkingDirectory)/gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: 1.17
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'clean build -x test'
      displayName: "Build And Test Backend"

    - script: |
        echo "Changing file permissions..."
        chmod +x $(System.DefaultWorkingDirectory)/gradlew
      displayName: 'Set execute permission for gradlew'
    
- stage: Build
  displayName: Build and publish stage
  jobs:
  - job: Build
    displayName: Build job
    pool:
      name: QuizPool
    steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      
      - task: Docker@2
        displayName: Build and publish image to Azure Container Registry
        inputs:
          command: buildAndPush
          containerRegistry: $(dockerRegistryServiceConnection)
          repository: $(imageRepository)
          dockerfile: $(dockerfilePath)
          tags: |
            latest
            $(tag)

- stage: Run Container
  displayName: Run container stage
  jobs:
    - job: RunContainer
      displayName: Run Docker container
      pool:
        name: QuizPool
      steps:
        - task: Docker@2
          displayName: Run Docker container
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            command: start